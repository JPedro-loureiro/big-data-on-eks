apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tpch-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tpch-init-sql
data:
  init.sql: |

    \echo 'Creating tables...'
    \ir /docker-entrypoint-initdb.d/schema.sql

    \echo 'Loading data...'
    \copy region   (r_regionkey, r_name, r_comment) FROM '/opt/tpch_data/region.tbl' DELIMITER '|';
    \copy nation   (n_nationkey, n_name, n_regionkey, n_comment) FROM '/opt/tpch_data/nation.tbl' DELIMITER '|';
    \copy customer (c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment) FROM '/opt/tpch_data/customer.tbl' DELIMITER '|';
    \copy orders   (o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment) FROM '/opt/tpch_data/orders.tbl' DELIMITER '|';
    \copy lineitem (l_orderkey, l_linenumber, l_partkey, l_suppkey, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment) FROM '/opt/tpch_data/lineitem.tbl' DELIMITER '|';
    \copy part     (p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment) FROM '/opt/tpch_data/part.tbl' DELIMITER '|';
    \copy supplier (s_suppkey, s_name, s_address, s_nationkey, s_phone, s_acctbal, s_comment) FROM '/opt/tpch_data/supplier.tbl' DELIMITER '|';
    \copy partsupp (ps_partkey, ps_suppkey, ps_availqty, ps_supplycost, ps_comment) FROM '/opt/tpch_data/partsupp.tbl' DELIMITER '|';

    \echo 'Creating procedures...'
    \ir /docker-entrypoint-initdb.d/procedures.sql

    \echo 'Scheduling cron jobs...'
    CREATE EXTENSION IF NOT EXISTS pg_cron;
    SELECT cron.schedule('insert_orders', '*/1 * * * *', $$CALL simulate_new_orders();$$);
    SELECT cron.schedule('insert_lineitems', '*/1 * * * *', $$CALL simulate_new_lineitems();$$);
    SELECT cron.schedule('update_orders', '*/1 * * * *', $$CALL update_order_status();$$);
    SELECT cron.schedule('update_lineitems', '*/1 * * * *', $$CALL update_lineitem_status();$$);

  schema.sql: |

    CREATE TABLE region (
      r_regionkey     INTEGER PRIMARY KEY,
      r_name          CHAR(25),
      r_comment       VARCHAR(152)
    );
    CREATE TABLE nation (
      n_nationkey     INTEGER PRIMARY KEY,
      n_name          CHAR(25),
      n_regionkey     INTEGER,
      n_comment       VARCHAR(152)
    );
    CREATE TABLE customer (
      c_custkey    INTEGER PRIMARY KEY,
      c_name       VARCHAR(25),
      c_address    VARCHAR(40),
      c_nationkey  INTEGER,
      c_phone      CHAR(15),
      c_acctbal    DECIMAL(15,2),
      c_mktsegment CHAR(10),
      c_comment    VARCHAR(117)
    );
    CREATE TABLE orders (
      o_orderkey      INTEGER PRIMARY KEY,
      o_custkey       INTEGER,
      o_orderstatus   CHAR(1),
      o_totalprice    DECIMAL(15,2),
      o_orderdate     DATE,
      o_orderpriority CHAR(15),
      o_clerk         CHAR(15),
      o_shippriority  INTEGER,
      o_comment       VARCHAR(79)
    );
    CREATE TABLE lineitem (
      l_orderkey      INTEGER,
      l_linenumber    INTEGER,
      l_partkey       INTEGER,
      l_suppkey       INTEGER,
      l_quantity      DECIMAL(15,2),
      l_extendedprice DECIMAL(15,2),
      l_discount      DECIMAL(15,2),
      l_tax           DECIMAL(15,2),
      l_returnflag    CHAR(1),
      l_linestatus    CHAR(1),
      l_shipdate      DATE,
      l_commitdate    DATE,
      l_receiptdate   DATE,
      l_shipinstruct  CHAR(25),
      l_shipmode      CHAR(10),
      l_comment       VARCHAR(44),
      PRIMARY KEY (l_orderkey, l_linenumber)
    );
    CREATE TABLE part (
      p_partkey     INTEGER PRIMARY KEY,
      p_name        VARCHAR(55),
      p_mfgr        CHAR(25),
      p_brand       CHAR(10),
      p_type        VARCHAR(25),
      p_size        INTEGER,
      p_container   CHAR(10),
      p_retailprice DECIMAL(15,2),
      p_comment     VARCHAR(23)
    );
    CREATE TABLE supplier (
      s_suppkey   INTEGER PRIMARY KEY,
      s_name      CHAR(25),
      s_address   CHAR(40),
      s_nationkey INTEGER,
      s_phone     CHAR(15),
      s_acctbal   DECIMAL(15,2),
      s_comment   VARCHAR(101)
    );
    CREATE TABLE partsupp (
      ps_partkey    INTEGER,
      ps_suppkey    INTEGER,
      ps_availqty   INTEGER,
      ps_supplycost DECIMAL(15,2),
      ps_comment    VARCHAR(199),
      PRIMARY KEY (ps_partkey, ps_suppkey)
    );
  procedures.sql: |

    CREATE OR REPLACE PROCEDURE simulate_new_orders()
    LANGUAGE plpgsql
    AS $$
    BEGIN
      INSERT INTO orders (
        o_orderkey, o_custkey, o_orderstatus, o_totalprice,
        o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
      )
      SELECT 
        (SELECT COALESCE(MAX(o_orderkey), 0) FROM orders) + g,
        FLOOR(random() * 150000)::int + 1,
        'O',
        ROUND((random() * 1000)::numeric, 2),
        current_date,
        '5-LOW',
        'CLERK' || FLOOR(random() * 1000)::int,
        0,
        'Simulated insert'
      FROM generate_series(1, 100) AS g;
    END;
    $$;

    CREATE OR REPLACE PROCEDURE simulate_new_lineitems()
    LANGUAGE plpgsql
    AS $$
    BEGIN
      INSERT INTO lineitem (
        l_orderkey, l_linenumber, l_partkey, l_suppkey,
        l_quantity, l_extendedprice, l_discount, l_tax,
        l_returnflag, l_linestatus, l_shipdate,
        l_commitdate, l_receiptdate,
        l_shipinstruct, l_shipmode, l_comment
      )
      SELECT
        o.o_orderkey,
        ROW_NUMBER() OVER (),
        FLOOR(random() * 200000)::int + 1,
        FLOOR(random() * 10000)::int + 1,
        ROUND((random() * 10 + 1)::numeric, 2),
        ROUND((random() * 1000 + 100)::numeric, 2),
        ROUND((random() * 0.1)::numeric, 2),
        ROUND((random() * 0.1)::numeric, 2),
        'N', 'O',
        current_date + INTERVAL '1 day',
        current_date + INTERVAL '2 days',
        current_date + INTERVAL '3 days',
        'DELIVER IN PERSON',
        'REG AIR',
        'Simulated lineitem'
      FROM (
        SELECT o_orderkey FROM orders
        ORDER BY o_orderkey DESC
        LIMIT 100
      ) o;
    END;
    $$;

    CREATE OR REPLACE PROCEDURE update_order_status()
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE orders
      SET o_orderstatus = 'F'
      WHERE o_orderstatus = 'O'
      AND o_orderkey IN (
        SELECT o_orderkey FROM orders
        ORDER BY RANDOM() LIMIT 100
      );
    END;
    $$;

    CREATE OR REPLACE PROCEDURE update_lineitem_status()
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE lineitem
      SET l_linestatus = 'F'
      WHERE l_linestatus = 'O'
      AND (l_orderkey, l_linenumber) IN (
        SELECT l_orderkey, l_linenumber FROM lineitem
        ORDER BY RANDOM() LIMIT 100
      );
    END;
    $$;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tpch-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tpch-postgres
  template:
    metadata:
      labels:
        app: tpch-postgres
    spec:
      containers:
        - name: postgres
          image: 590183863248.dkr.ecr.us-east-1.amazonaws.com/big-data-on-eks/tpch-postgres:latest
          args:
            - "-c"
            - "wal_level=logical"
            - "-c"
            - "max_wal_senders=10"
            - "-c"
            - "max_replication_slots=10"
            - "-c"
            - "cron.database_name=tpch"

          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "1.5Gi"
              cpu: "1000m"

          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: tpch
            - name: PGDATA
              value: /pgdata/data
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: postgres-data
              mountPath: /pgdata
      volumes:
        - name: init-scripts
          configMap:
            name: tpch-init-sql

        # # Volume para ambiente local (Minikube)
        # - name: postgres-data
        #   emptyDir: {}

        # ðŸ’¬ Quando for usar no EKS, com volume persistente:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: tpch-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: tpch-postgres
spec:
  selector:
    app: tpch-postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
